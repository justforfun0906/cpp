/*
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/.                   *&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.                                   %@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@/           (@@@@@@@@@@@@@@@@@@@@@           .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@       &@@@(   (@@@@@@@@@@@@@@@@@@@@@    @@@@,      %@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@,     %@@@@@,       ,@@@@@@@@@@@@@@@@#        @@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@     (@@@@@,     ,@.       &@@@@@@@,       #*      @@@@@@     @@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@#    %@@@@@     (@@@@@@@@/               @@@@@@@@%     @@@@@@     @@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@.    @@@@@     @@@@@@@@@@@@@@@%      *@@@@@@@@@@@@@@@     @@@@@%    @@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@/   ,@@@@(    @@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@&    @@@@@@    @@@@@@@@@@@@@@@@@@
@@@@@@@@@.      @@@@.    @@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@    @@@@@/   (@@@@@@@@@@@@@@@@@
@@@@@@@/    *@@@@@@,   ,@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@    @@@@@              (@@@@@@
@@@@@@@.       /%&%    @@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@   ,@@@@
@@@@@@@@&,                                                                      /@@@@@@@    @)  %@@@
@@@@@@@@@@,  ,@@@@@@,                                          		   &@@@@@@%   @@@@@@@@@@@#  %@@@
@@@@@@@@@@@@         /@@@@.  *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   .@@@@@@@@@@(  %@@@@@@@@@   .@@@@
@@@@@@@@@@@@#    (@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   *@@@@@@@@@@@@*             *@@@@@@
@@@@@@@@@/    @@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   ,@@@@@@@@@@@@@   *@@@@@@@@@@@@@@@@@@
@@@@@@&    @@@@@@@@@@@@@#                                      @@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@
@@@@*   (@@@@@@@@&*       @@@@@@@@@@@@@&%#((/////((#%&@@@&   @@@@@@@@@@@(    (@@@@@@@@@@@@@@@@@@@@@@
@@@@@&,            .#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.  ,@@@@@@@*      @@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
#include<bits/stdc++.h>
#define faster ios_base::sync_with_stdio(false);cin.tie(0);
#define pii pair<int, int>
#define vi vector<int>
#define ff first
#define ss second
typedef long long ll;
using namespace std;
int st[800000];
int a[200000];
void build(int l, int r, int ind){
	if(l==r){
		st[ind] = a[l];
		return;
	}
	int mid=(l+r)/2;
	build(l, mid , ind*2);
	build(mid+1, r, ind*2+1);
	st[ind]= st[ind*2]^st[ind*2+1];
}
int qry(int l, int r, int ql, int qr, int ind){
    if(ql>r||qr<l) return 0;
    if(qr>=r&&ql<=l) return st[ind];
    int mid=(l+r)/2;
    if(mid>=qr) return qry(l,mid,ql,qr,ind*2);
    else if(ql>mid) return qry(mid+1, r, ql, qr, ind*2+1);
    else{
        int lson=qry(l,mid,ql,mid,ind*2);
        int rson=qry(mid+1,r,mid+1,qr,ind*2+1);
		return lson^rson;
    } 
}
int main(){
	faster;
	int l,q;
	cin>>l>>q;
	for(int i=1;i<=l;i++){
		cin>>a[i];
	}
	build(1,l,1);
	while(q--){
		int ql,qr;
		cin>>ql>>qr;
		cout<<qry(1,l,ql,qr,1)<<'\n';
	}
}

