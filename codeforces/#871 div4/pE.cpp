/*
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/.                   *&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.                                   %@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@/           (@@@@@@@@@@@@@@@@@@@@@           .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@       &@@@(   (@@@@@@@@@@@@@@@@@@@@@    @@@@,      %@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@,     %@@@@@,       ,@@@@@@@@@@@@@@@@#        @@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@     (@@@@@,     ,@.       &@@@@@@@,       #*      @@@@@@     @@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@#    %@@@@@     (@@@@@@@@/               @@@@@@@@%     @@@@@@     @@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@.    @@@@@     @@@@@@@@@@@@@@@%      *@@@@@@@@@@@@@@@     @@@@@%    @@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@/   ,@@@@(    @@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@&    @@@@@@    @@@@@@@@@@@@@@@@@@
@@@@@@@@@.      @@@@.    @@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@    @@@@@/   (@@@@@@@@@@@@@@@@@
@@@@@@@/    *@@@@@@,   ,@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@    @@@@@              (@@@@@@
@@@@@@@.       /%&%    @@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@   ,@@@@
@@@@@@@@&,                                                                      /@@@@@@@    @(  %@@@
@@@@@@@@@@,  ,@@@@@@,                                          .,*#    &@@@@@@%   @@@@@@@@@@@#  %@@@
@@@@@@@@@@@@         /@@@@.  *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   .@@@@@@@@@@(  %@@@@@@@@@   .@@@@
@@@@@@@@@@@@#    (@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   *@@@@@@@@@@@@*             *@@@@@@
@@@@@@@@@/    @@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   ,@@@@@@@@@@@@@   *@@@@@@@@@@@@@@@@@@
@@@@@@&    @@@@@@@@@@@@@#                                      @@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@
@@@@*   (@@@@@@@@&*       @@@@@@@@@@@@@&%#((/////((#%&@@@&   @@@@@@@@@@@(    (@@@@@@@@@@@@@@@@@@@@@@
@@@@@&,            .#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.  ,@@@@@@@*      @@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
#include<bits/stdc++.h>
#define faster ios_base::sync_with_stdio(false);cin.tie(0);
#define pii pair<int, int>
#define vi vector<int>
#define ff first
#define ss second
typedef long long ll;
using namespace std;
int dx[4]={0,1,0,-1};
int dy[4]={1,0,-1,0};
int lake[1005][1005]={0};
bool visit[1005][1005]={0};
int main(){
    faster;
    int t;
	cin>>t;
    while(t--){
    	int m,n;
    	cin>>m>>n;
    	int max_vol=0;
    	int vol=0;
    	for(int i=0;i<m+5;i++){
    		for(int j=0;j<n+5;j++){
    			lake[i][j]=0;
    			visit[i][j]=0;
			}
		}
		for(int i=1;i<=m;i++){
			for(int j=1;j<=n;j++){
				cin>>lake[i][j];
			}
		}
		queue<pii>bfs;
		for(int i=1;i<=m;i++){
			for(int j=1;j<=n;j++){
				if(lake[i][j]==0)visit[i][j]=1;
				else if(lake[i][j]!=0&&visit[i][j]==0){
					visit[i][j]=1;
					bfs.push(make_pair(i,j));
					vol=0;
				}
				while(!bfs.empty()){
					int x=bfs.front().first;
					int y=bfs.front().second;
					bfs.pop();
					vol+=lake[x][y];
					//cout<<x<<" "<<y<<" vol="<<vol<<'\n';
					for(int i=0;i<4;i++){
						int nx=x+dx[i];
						int ny=y+dy[i];
						if(lake[nx][ny]==0)visit[nx][ny]=1;
						else if(lake[nx][ny]!=0&&!visit[nx][ny]){
							bfs.push(make_pair(nx,ny));
							visit[nx][ny]=1;
						}
					}
				}
				if(vol>max_vol)max_vol=vol;
			}
		}
		cout<<max_vol<<'\n';
	}
}